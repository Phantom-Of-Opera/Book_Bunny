<%-include("partials/header.ejs") %>

<!-- <div class="strip"> -->
<div class="container pt-3">
	<div class="searchArea" id="searchArea">
		<form id="searchForm" action="/searchbook" method="POST">
			<h2 class="simonetta-black fontFlex-h2 mb-2">
				! Add books to your library !
			</h2>
			<div class="mb-3 searchBar">
				<div class="searchInput">
					<label class="fontFlex searchLabel">Criteria 2 :</label>
					<select
						name="searchType"
						class="form-selet fontFlex searchBorders fieldType"
						id="searchType"
						width="250px"
					>
						<option value="title">Title</option>
						<option value="author">Author</option>
						<option value="subject">Subject</option>
						<option value="place">Place</option>
					</select>
					<input
						type="text"
						class="simonetta-black fontFlex searchField searchBorders"
						id="searchValue"
						name="searchValue"
						value="*"
						placeholder="What do you want to find?"
					/>
				</div>
				<div class="searchInput">
					<label class="fontFlex searchLabel">Criteria 2 :</label>
					<select
						name="searchType2"
						class="form-selet fontFlex searchBorders fieldType"
						id="searchType2"
						width="250px"
					>
						<option value="title">Title</option>
						<option value="author" selected>Author</option>
						<option value="subject">Subject</option>
						<option value="place">Place</option>
					</select>
					<input
						type="text"
						class="simonetta-black searchField fontFlex searchBorders"
						id="searchValue2"
						name="searchValue2"
						value="*"
						placeholder="What do you want to find?"
					/>
				</div>
				<button
					type="submit"
					class="btn btn-primary searchButton fontFlex"
					id="btnSearch"
					value="Search"
					name="btnBook"
				>
					Search book
				</button>
			</div>
		</form>
		<form
			id="addForm"
			action="/addbook"
			method="post"
			style="text-align: center"
		>
			<input type="hidden" name="selectedBooks" id="selectedBooksInput" />
			<button
				type="submit"
				class="btn btn-primary fontFlex"
				id="btnAdd"
				style="margin-bottom: 16px; text-align: center"
				value="Add"
				name="btnBook"
				disabled
			>
				Check your books
			</button>
		</form>
	</div>
	<div class="list-group scrollable" id="resultArea"></div>
</div>
<!-- </div> -->

<script>
	const selectedBooks = [];
	var numberOfBooks = 0;

	// Highlight the search type select elements if they are the same
	document.querySelectorAll(".fieldType").forEach((field) => {
		field.addEventListener("change", function () {
			const searchType1 = document.getElementById("searchType").value;
			const searchType2 = document.getElementById("searchType2").value;

			if (searchType1 === searchType2) {
				document.getElementById("searchType").classList.add("highlight");
				document.getElementById("searchType2").classList.add("highlight");
			} else {
				document.getElementById("searchType").classList.remove("highlight");
				document.getElementById("searchType2").classList.remove("highlight");
			}
		});
	});

	document
		.getElementById("searchForm")
		.addEventListener("submit", async function (e) {
			e.preventDefault(); // stop the page from reloading

			const value = document.getElementById("searchValue").value;
			const type = document.getElementById("searchType").value;
			const value2 = document.getElementById("searchValue2").value;
			const type2 = document.getElementById("searchType2").value;

			// Check if both search fields are empty
			if (value.trim() === "" || value2.trim() === "") {
				alert(
					"Please enter a search term in at least one field and use * on the other."
				);
				return;
			}

			// Check if both search types are the same
			if (type === type2) {
				alert("Please select different search criteria.");
				return;
			}

			try {
				const response = await fetch("/searchbook", {
					method: "POST",
					headers: {
						"Content-Type": "application/json",
					},
					body: JSON.stringify({
						searchValue: value,
						searchType: type,
						searchValue2: value2,
						searchType2: type2,
					}),
				});

				const result = await response.json();

				const listGroup = document.querySelector(".list-group");
				listGroup.innerHTML = ""; // Clear existing entries

				// If your result is an array of books (like from OpenLibrary's search API)
				if (result.docs && result.docs.length) {
					result.docs.slice(0, 100).forEach((book, index) => {
						const title = book.title || "Untitled";
						const authors = book.author_name?.join(", ") || "Unknown Author";
						const author_key = book.author_key || "Unknown Author Key";
						const olid = book.key.split("/").pop(); // Extract OLID if needed
						const coverCode = book.cover_edition_key || null;
						const publishedYear = book.first_publish_year || "Unknown Year";
						const works = book.key || "Unknown Works";

						listGroup.innerHTML += `
						<div class="searchResult">
							<div class="coverResult">
								<img
									src="https://covers.openlibrary.org/b/olid/${coverCode}-S.jpg"
									alt="book cover"
									height=60px
									style="max-width: 60px;"
								/>
							</div>
							<label class="list-group-item d-flex gap-2 bookResult fontFlex">
								<input
									class="form-check-input flex-shrink-0"
									type="checkbox"
									name="listGroupRadios"
									value="${olid}"
									id="book-${index}"
									// {index === 0 ? "checked" : ""}
								/>
								<span>
									${title} - ${publishedYear}
									<small class="d-block text-body-secondary">${authors}</small>
								</span>
							</label>
						</div>
					`;
						// Call the sort function after rendering the results
						sortSearchResults();

						// Delay event listener attachment until after element is in the DOM
						setTimeout(() => {
							const checkbox = document.getElementById(`book-${index}`);
							checkbox.addEventListener("change", function () {
								const bookData = {
									title: title,
									cover: coverCode,
									publish: publishedYear,
									oleId: olid,
									author: authors,
									author_key: author_key,
									works: works,
									summary: "",
								};

								if (this.checked) {
									if (!selectedBooks.some((b) => b.oleId === olid)) {
										selectedBooks.push(bookData);
									}
								} else {
									const indexToRemove = selectedBooks.findIndex(
										(b) => b.oleId === olid
									);
									if (indexToRemove !== -1) {
										selectedBooks.splice(indexToRemove, 1);
									}
								}
								// Update the number of selected books
								numberOfBooks = selectedBooks.length;
								//Disable the add button if no books are selected
								document.getElementById("btnAdd").disabled =
									numberOfBooks === 0;
								// Update the button text
								document.getElementById("btnAdd").innerHTML =
									"Add Selection : " + numberOfBooks + " book(s)";
							});
						}, 0);
					});
				} else {
					listGroup.innerHTML = `<div class="text-muted">No results found.</div>`;
				}
			} catch (error) {
				console.error("Fetch failed:", error);
			}
		});
	document.getElementById("addForm").addEventListener("submit", function () {
		document.getElementById("selectedBooksInput").value =
			JSON.stringify(selectedBooks);
	});

	function sortSearchResults() {
		const resultArea = document.getElementById("resultArea");
		const searchResults = Array.from(
			resultArea.getElementsByClassName("searchResult")
		);

		// Sort the search results by published year
		searchResults.sort((a, b) => {
			const yearA =
				parseInt(
					a.querySelector(".bookResult span").textContent.split(" - ")[1]
				) || 0;
			const yearB =
				parseInt(
					b.querySelector(".bookResult span").textContent.split(" - ")[1]
				) || 0;
			return yearB - yearA; // Sort in descending order (newest first)
		});

		// Reorder the elements in the DOM
		searchResults.forEach((result) => resultArea.appendChild(result));
	}
</script>

<%-include("partials/footer.ejs") %>
