<%-include("partials/header.ejs") %>

<!-- <div class="strip"> -->
<div class="container pt-3">
	<div class="searchArea" id="searchArea">
		<form id="searchForm" action="/searchbook" method="POST">
			<h2 class="simonetta-black fontFlex-h2">
				Search for a new book to insert
			</h2>
			<div class="mb-3 searchBar">
				<label class="searchLabel fontFlex">Search by :</label>
				<select
					name="searchType"
					class="form-selet fontFlex searchBorders"
					id="searchType"
					width="250px"
				>
					<option value="title" selected>Title</option>
					<option value="author">Author</option>
					<option value="subject">Subject</option>
				</select>
				<input
					type="text"
					class="simonetta-black searchInput fontFlex searchBorders"
					id="searchTitle"
					name="searchTitle"
					placeholder="What do you want to find?"
				/>

				<button
					type="submit"
					class="btn btn-primary searchButton fontFlex"
					id="btnSearch"
					value="Search"
					name="btnBook"
				>
					Search book
				</button>
			</div>
		</form>
		<form
			id="addForm"
			action="/addbook"
			method="post"
			style="text-align: center"
		>
			<input type="hidden" name="selectedBooks" id="selectedBooksInput" />
			<button
				type="submit"
				class="btn btn-primary fontFlex"
				id="btnAdd"
				style="margin-bottom: 16px; text-align: center"
				value="Add"
				name="btnBook"
				disabled
			>
				Add Selection
			</button>
		</form>
	</div>
	<div class="list-group" id="resultArea"></div>
</div>
<!-- </div> -->

<script>
	const selectedBooks = [];
	var numberOfBooks = 0;

	document
		.getElementById("searchForm")
		.addEventListener("submit", async function (e) {
			e.preventDefault(); // stop the page from reloading

			const title = document.getElementById("searchTitle").value;
			const type = document.getElementById("searchType").value;

			console.log("I see this");
			console.log("Title: ", title);
			console.log("Type: ", type);

			try {
				const response = await fetch("/searchbook", {
					method: "POST",
					headers: {
						"Content-Type": "application/json",
					},
					body: JSON.stringify({ searchTitle: title, searchType: type }),
				});

				const result = await response.json();

				const listGroup = document.querySelector(".list-group");
				listGroup.innerHTML = ""; // Clear existing entries

				// If your result is an array of books (like from OpenLibrary's search API)
				if (result.docs && result.docs.length) {
					result.docs.slice(0, 50).forEach((book, index) => {
						const title = book.title || "Untitled";
						const authors = book.author_name?.join(", ") || "Unknown Author";
						const author_key = book.author_key || "Unknown Author Key";
						const olid = book.key.split("/").pop(); // Extract OLID if needed
						const coverCode = book.cover_edition_key || "NoCover";
						const publishedYear = book.first_publish_year || "Unknown Year";

						listGroup.innerHTML += `
						<div class="searchResult">
							<div class="coverResult">
								<img
									src="https://covers.openlibrary.org/b/olid/${coverCode}-S.jpg"
									alt="book cover"
									height=60px
									style="max-width: 60px;"
								/>
							</div>
							<label class="list-group-item d-flex gap-2 bookResult fontFlex">
								<input
									class="form-check-input flex-shrink-0"
									type="checkbox"
									name="listGroupRadios"
									value="${olid}"
									id="book-${index}"
									// {index === 0 ? "checked" : ""}
								/>
								<span>
									${title}
									<small class="d-block text-body-secondary">${authors}</small>
								</span>
							</label>
						</div>
					`;
						// Delay event listener attachment until after element is in the DOM
						setTimeout(() => {
							const checkbox = document.getElementById(`book-${index}`);
							checkbox.addEventListener("change", function () {
								const bookData = {
									title: title,
									cover: coverCode,
									publish: publishedYear,
									oleId: olid,
									author: authors,
									author_key: author_key,
								};

								if (this.checked) {
									if (!selectedBooks.some((b) => b.oleId === olid)) {
										selectedBooks.push(bookData);
									}
								} else {
									const indexToRemove = selectedBooks.findIndex(
										(b) => b.oleId === olid
									);
									if (indexToRemove !== -1) {
										selectedBooks.splice(indexToRemove, 1);
									}
								}
								// Update the number of selected books
								numberOfBooks = selectedBooks.length;
								//Disable the add button if no books are selected
								document.getElementById("btnAdd").disabled =
									numberOfBooks === 0;
								// Update the button text
								document.getElementById("btnAdd").innerHTML =
									"Add Selection : " + numberOfBooks + " book(s)";

								console.log("Current selectedBooks:", selectedBooks);
							});
						}, 0);
					});
				} else {
					listGroup.innerHTML = `<div class="text-muted">No results found.</div>`;
				}
			} catch (error) {
				console.error("Fetch failed:", error);
			}
		});
	document.getElementById("addForm").addEventListener("submit", function () {
		document.getElementById("selectedBooksInput").value =
			JSON.stringify(selectedBooks);
	});
</script>

<%-include("partials/footer.ejs") %>
